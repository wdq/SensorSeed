#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HomeOutsideWeatherStation
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SensorSeed")]
	public partial class SensorSeedDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHomeBasementRoomWeatherStationData(HomeBasementRoomWeatherStationData instance);
    partial void UpdateHomeBasementRoomWeatherStationData(HomeBasementRoomWeatherStationData instance);
    partial void DeleteHomeBasementRoomWeatherStationData(HomeBasementRoomWeatherStationData instance);
    partial void InsertSensorType(SensorType instance);
    partial void UpdateSensorType(SensorType instance);
    partial void DeleteSensorType(SensorType instance);
    partial void InsertHomeLivingRoomWeatherStationData(HomeLivingRoomWeatherStationData instance);
    partial void UpdateHomeLivingRoomWeatherStationData(HomeLivingRoomWeatherStationData instance);
    partial void DeleteHomeLivingRoomWeatherStationData(HomeLivingRoomWeatherStationData instance);
    partial void InsertHomeOutsideWeatherStationData(HomeOutsideWeatherStationData instance);
    partial void UpdateHomeOutsideWeatherStationData(HomeOutsideWeatherStationData instance);
    partial void DeleteHomeOutsideWeatherStationData(HomeOutsideWeatherStationData instance);
    partial void InsertHomeServerRoomWeatherStationData(HomeServerRoomWeatherStationData instance);
    partial void UpdateHomeServerRoomWeatherStationData(HomeServerRoomWeatherStationData instance);
    partial void DeleteHomeServerRoomWeatherStationData(HomeServerRoomWeatherStationData instance);
    partial void InsertHomeWilliamRoomWeatherStationData(HomeWilliamRoomWeatherStationData instance);
    partial void UpdateHomeWilliamRoomWeatherStationData(HomeWilliamRoomWeatherStationData instance);
    partial void DeleteHomeWilliamRoomWeatherStationData(HomeWilliamRoomWeatherStationData instance);
    partial void InsertSensorData(SensorData instance);
    partial void UpdateSensorData(SensorData instance);
    partial void DeleteSensorData(SensorData instance);
    partial void InsertSensor(Sensor instance);
    partial void UpdateSensor(Sensor instance);
    partial void DeleteSensor(Sensor instance);
    #endregion
		
		public SensorSeedDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SensorSeedConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SensorSeedDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorSeedDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorSeedDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorSeedDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HomeBasementRoomWeatherStationData> HomeBasementRoomWeatherStationDatas
		{
			get
			{
				return this.GetTable<HomeBasementRoomWeatherStationData>();
			}
		}
		
		public System.Data.Linq.Table<SensorType> SensorTypes
		{
			get
			{
				return this.GetTable<SensorType>();
			}
		}
		
		public System.Data.Linq.Table<HomeLivingRoomWeatherStationData> HomeLivingRoomWeatherStationDatas
		{
			get
			{
				return this.GetTable<HomeLivingRoomWeatherStationData>();
			}
		}
		
		public System.Data.Linq.Table<HomeOutsideWeatherStationData> HomeOutsideWeatherStationDatas
		{
			get
			{
				return this.GetTable<HomeOutsideWeatherStationData>();
			}
		}
		
		public System.Data.Linq.Table<HomeServerRoomWeatherStationData> HomeServerRoomWeatherStationDatas
		{
			get
			{
				return this.GetTable<HomeServerRoomWeatherStationData>();
			}
		}
		
		public System.Data.Linq.Table<HomeWilliamRoomWeatherStationData> HomeWilliamRoomWeatherStationDatas
		{
			get
			{
				return this.GetTable<HomeWilliamRoomWeatherStationData>();
			}
		}
		
		public System.Data.Linq.Table<SensorData> SensorDatas
		{
			get
			{
				return this.GetTable<SensorData>();
			}
		}
		
		public System.Data.Linq.Table<Sensor> Sensors
		{
			get
			{
				return this.GetTable<Sensor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeBasementRoomWeatherStationData")]
	public partial class HomeBasementRoomWeatherStationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private System.Nullable<decimal> _Temperature;
		
		private System.Nullable<decimal> _Humidity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTemperatureChanging(System.Nullable<decimal> value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(System.Nullable<decimal> value);
    partial void OnHumidityChanged();
    #endregion
		
		public HomeBasementRoomWeatherStationData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SensorTypes")]
	public partial class SensorType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private EntitySet<Sensor> _Sensors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SensorType()
		{
			this._Sensors = new EntitySet<Sensor>(new Action<Sensor>(this.attach_Sensors), new Action<Sensor>(this.detach_Sensors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SensorType_Sensor", Storage="_Sensors", ThisKey="Id", OtherKey="SensorTypeId")]
		public EntitySet<Sensor> Sensors
		{
			get
			{
				return this._Sensors;
			}
			set
			{
				this._Sensors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.SensorType = this;
		}
		
		private void detach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.SensorType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeLivingRoomWeatherStationData")]
	public partial class HomeLivingRoomWeatherStationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private System.Nullable<decimal> _Temperature;
		
		private System.Nullable<decimal> _Humidity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTemperatureChanging(System.Nullable<decimal> value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(System.Nullable<decimal> value);
    partial void OnHumidityChanged();
    #endregion
		
		public HomeLivingRoomWeatherStationData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeOutsideWeatherStationData")]
	public partial class HomeOutsideWeatherStationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private System.Nullable<decimal> _Temperature;
		
		private System.Nullable<decimal> _Humidity;
		
		private System.Nullable<decimal> _Pressure;
		
		private System.Nullable<decimal> _Altitude;
		
		private System.Nullable<decimal> _WindSpeed;
		
		private System.Nullable<decimal> _GustSpeed;
		
		private System.Nullable<decimal> _Rain;
		
		private System.Nullable<decimal> _Battery;
		
		private System.Nullable<decimal> _Solar;
		
		private System.Nullable<decimal> _WindDirection;
		
		private System.Nullable<decimal> _Temperature180;
		
		private System.Nullable<decimal> _Dewpoint;
		
		private System.Nullable<int> _Veml6070;
		
		private System.Nullable<decimal> _Lux;
		
		private System.Nullable<decimal> _TemperatureDHT22;
		
		private System.Nullable<decimal> _HumidityDHT22;
		
		private System.Nullable<decimal> _PacketRSSI;
		
		private System.Nullable<int> _NumberOfPackets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTemperatureChanging(System.Nullable<decimal> value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(System.Nullable<decimal> value);
    partial void OnHumidityChanged();
    partial void OnPressureChanging(System.Nullable<decimal> value);
    partial void OnPressureChanged();
    partial void OnAltitudeChanging(System.Nullable<decimal> value);
    partial void OnAltitudeChanged();
    partial void OnWindSpeedChanging(System.Nullable<decimal> value);
    partial void OnWindSpeedChanged();
    partial void OnGustSpeedChanging(System.Nullable<decimal> value);
    partial void OnGustSpeedChanged();
    partial void OnRainChanging(System.Nullable<decimal> value);
    partial void OnRainChanged();
    partial void OnBatteryChanging(System.Nullable<decimal> value);
    partial void OnBatteryChanged();
    partial void OnSolarChanging(System.Nullable<decimal> value);
    partial void OnSolarChanged();
    partial void OnWindDirectionChanging(System.Nullable<decimal> value);
    partial void OnWindDirectionChanged();
    partial void OnTemperature180Changing(System.Nullable<decimal> value);
    partial void OnTemperature180Changed();
    partial void OnDewpointChanging(System.Nullable<decimal> value);
    partial void OnDewpointChanged();
    partial void OnVeml6070Changing(System.Nullable<int> value);
    partial void OnVeml6070Changed();
    partial void OnLuxChanging(System.Nullable<decimal> value);
    partial void OnLuxChanged();
    partial void OnTemperatureDHT22Changing(System.Nullable<decimal> value);
    partial void OnTemperatureDHT22Changed();
    partial void OnHumidityDHT22Changing(System.Nullable<decimal> value);
    partial void OnHumidityDHT22Changed();
    partial void OnPacketRSSIChanging(System.Nullable<decimal> value);
    partial void OnPacketRSSIChanged();
    partial void OnNumberOfPacketsChanging(System.Nullable<int> value);
    partial void OnNumberOfPacketsChanged();
    #endregion
		
		public HomeOutsideWeatherStationData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Altitude", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Altitude
		{
			get
			{
				return this._Altitude;
			}
			set
			{
				if ((this._Altitude != value))
				{
					this.OnAltitudeChanging(value);
					this.SendPropertyChanging();
					this._Altitude = value;
					this.SendPropertyChanged("Altitude");
					this.OnAltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindSpeed", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> WindSpeed
		{
			get
			{
				return this._WindSpeed;
			}
			set
			{
				if ((this._WindSpeed != value))
				{
					this.OnWindSpeedChanging(value);
					this.SendPropertyChanging();
					this._WindSpeed = value;
					this.SendPropertyChanged("WindSpeed");
					this.OnWindSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GustSpeed", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> GustSpeed
		{
			get
			{
				return this._GustSpeed;
			}
			set
			{
				if ((this._GustSpeed != value))
				{
					this.OnGustSpeedChanging(value);
					this.SendPropertyChanging();
					this._GustSpeed = value;
					this.SendPropertyChanged("GustSpeed");
					this.OnGustSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rain", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> Rain
		{
			get
			{
				return this._Rain;
			}
			set
			{
				if ((this._Rain != value))
				{
					this.OnRainChanging(value);
					this.SendPropertyChanging();
					this._Rain = value;
					this.SendPropertyChanged("Rain");
					this.OnRainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Battery", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Battery
		{
			get
			{
				return this._Battery;
			}
			set
			{
				if ((this._Battery != value))
				{
					this.OnBatteryChanging(value);
					this.SendPropertyChanging();
					this._Battery = value;
					this.SendPropertyChanged("Battery");
					this.OnBatteryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solar", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Solar
		{
			get
			{
				return this._Solar;
			}
			set
			{
				if ((this._Solar != value))
				{
					this.OnSolarChanging(value);
					this.SendPropertyChanging();
					this._Solar = value;
					this.SendPropertyChanged("Solar");
					this.OnSolarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindDirection", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> WindDirection
		{
			get
			{
				return this._WindDirection;
			}
			set
			{
				if ((this._WindDirection != value))
				{
					this.OnWindDirectionChanging(value);
					this.SendPropertyChanging();
					this._WindDirection = value;
					this.SendPropertyChanged("WindDirection");
					this.OnWindDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature180", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Temperature180
		{
			get
			{
				return this._Temperature180;
			}
			set
			{
				if ((this._Temperature180 != value))
				{
					this.OnTemperature180Changing(value);
					this.SendPropertyChanging();
					this._Temperature180 = value;
					this.SendPropertyChanged("Temperature180");
					this.OnTemperature180Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dewpoint", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> Dewpoint
		{
			get
			{
				return this._Dewpoint;
			}
			set
			{
				if ((this._Dewpoint != value))
				{
					this.OnDewpointChanging(value);
					this.SendPropertyChanging();
					this._Dewpoint = value;
					this.SendPropertyChanged("Dewpoint");
					this.OnDewpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Veml6070", DbType="Int")]
		public System.Nullable<int> Veml6070
		{
			get
			{
				return this._Veml6070;
			}
			set
			{
				if ((this._Veml6070 != value))
				{
					this.OnVeml6070Changing(value);
					this.SendPropertyChanging();
					this._Veml6070 = value;
					this.SendPropertyChanged("Veml6070");
					this.OnVeml6070Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lux", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Lux
		{
			get
			{
				return this._Lux;
			}
			set
			{
				if ((this._Lux != value))
				{
					this.OnLuxChanging(value);
					this.SendPropertyChanging();
					this._Lux = value;
					this.SendPropertyChanged("Lux");
					this.OnLuxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemperatureDHT22", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> TemperatureDHT22
		{
			get
			{
				return this._TemperatureDHT22;
			}
			set
			{
				if ((this._TemperatureDHT22 != value))
				{
					this.OnTemperatureDHT22Changing(value);
					this.SendPropertyChanging();
					this._TemperatureDHT22 = value;
					this.SendPropertyChanged("TemperatureDHT22");
					this.OnTemperatureDHT22Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HumidityDHT22", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> HumidityDHT22
		{
			get
			{
				return this._HumidityDHT22;
			}
			set
			{
				if ((this._HumidityDHT22 != value))
				{
					this.OnHumidityDHT22Changing(value);
					this.SendPropertyChanging();
					this._HumidityDHT22 = value;
					this.SendPropertyChanged("HumidityDHT22");
					this.OnHumidityDHT22Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacketRSSI", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> PacketRSSI
		{
			get
			{
				return this._PacketRSSI;
			}
			set
			{
				if ((this._PacketRSSI != value))
				{
					this.OnPacketRSSIChanging(value);
					this.SendPropertyChanging();
					this._PacketRSSI = value;
					this.SendPropertyChanged("PacketRSSI");
					this.OnPacketRSSIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPackets", DbType="Int")]
		public System.Nullable<int> NumberOfPackets
		{
			get
			{
				return this._NumberOfPackets;
			}
			set
			{
				if ((this._NumberOfPackets != value))
				{
					this.OnNumberOfPacketsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPackets = value;
					this.SendPropertyChanged("NumberOfPackets");
					this.OnNumberOfPacketsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeServerRoomWeatherStationData")]
	public partial class HomeServerRoomWeatherStationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private System.Nullable<decimal> _Temperature;
		
		private System.Nullable<decimal> _Humidity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTemperatureChanging(System.Nullable<decimal> value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(System.Nullable<decimal> value);
    partial void OnHumidityChanged();
    #endregion
		
		public HomeServerRoomWeatherStationData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeWilliamRoomWeatherStationData")]
	public partial class HomeWilliamRoomWeatherStationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private System.Nullable<decimal> _Temperature;
		
		private System.Nullable<decimal> _Humidity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnTemperatureChanging(System.Nullable<decimal> value);
    partial void OnTemperatureChanged();
    partial void OnHumidityChanging(System.Nullable<decimal> value);
    partial void OnHumidityChanged();
    #endregion
		
		public HomeWilliamRoomWeatherStationData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temperature", DbType="Decimal(4,2)")]
		public System.Nullable<decimal> Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> Humidity
		{
			get
			{
				return this._Humidity;
			}
			set
			{
				if ((this._Humidity != value))
				{
					this.OnHumidityChanging(value);
					this.SendPropertyChanging();
					this._Humidity = value;
					this.SendPropertyChanged("Humidity");
					this.OnHumidityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SensorData")]
	public partial class SensorData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SensorId;
		
		private System.DateTime _Timestamp;
		
		private string _Value;
		
		private EntityRef<Sensor> _Sensor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSensorIdChanging(System.Guid value);
    partial void OnSensorIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public SensorData()
		{
			this._Sensor = default(EntityRef<Sensor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					if (this._Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_SensorData", Storage="_Sensor", ThisKey="SensorId", OtherKey="Id", IsForeignKey=true)]
		public Sensor Sensor
		{
			get
			{
				return this._Sensor.Entity;
			}
			set
			{
				Sensor previousValue = this._Sensor.Entity;
				if (((previousValue != value) 
							|| (this._Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sensor.Entity = null;
						previousValue.SensorDatas.Remove(this);
					}
					this._Sensor.Entity = value;
					if ((value != null))
					{
						value.SensorDatas.Add(this);
						this._SensorId = value.Id;
					}
					else
					{
						this._SensorId = default(System.Guid);
					}
					this.SendPropertyChanged("Sensor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sensors")]
	public partial class Sensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SensorTypeId;
		
		private string _Name;
		
		private EntitySet<SensorData> _SensorDatas;
		
		private EntityRef<SensorType> _SensorType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSensorTypeIdChanging(System.Guid value);
    partial void OnSensorTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sensor()
		{
			this._SensorDatas = new EntitySet<SensorData>(new Action<SensorData>(this.attach_SensorDatas), new Action<SensorData>(this.detach_SensorDatas));
			this._SensorType = default(EntityRef<SensorType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorTypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SensorTypeId
		{
			get
			{
				return this._SensorTypeId;
			}
			set
			{
				if ((this._SensorTypeId != value))
				{
					if (this._SensorType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SensorTypeId = value;
					this.SendPropertyChanged("SensorTypeId");
					this.OnSensorTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_SensorData", Storage="_SensorDatas", ThisKey="Id", OtherKey="SensorId")]
		public EntitySet<SensorData> SensorDatas
		{
			get
			{
				return this._SensorDatas;
			}
			set
			{
				this._SensorDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SensorType_Sensor", Storage="_SensorType", ThisKey="SensorTypeId", OtherKey="Id", IsForeignKey=true)]
		public SensorType SensorType
		{
			get
			{
				return this._SensorType.Entity;
			}
			set
			{
				SensorType previousValue = this._SensorType.Entity;
				if (((previousValue != value) 
							|| (this._SensorType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SensorType.Entity = null;
						previousValue.Sensors.Remove(this);
					}
					this._SensorType.Entity = value;
					if ((value != null))
					{
						value.Sensors.Add(this);
						this._SensorTypeId = value.Id;
					}
					else
					{
						this._SensorTypeId = default(System.Guid);
					}
					this.SendPropertyChanged("SensorType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SensorDatas(SensorData entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = this;
		}
		
		private void detach_SensorDatas(SensorData entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = null;
		}
	}
}
#pragma warning restore 1591
